#include <iostream>
#include <cassert>

using namespace std;

const int MAX_NODES = 26;
const int DISCONNECT = -1;

int graph[MAX_NODES][MAX_NODES];
int dist[MAX_NODES][MAX_NODES];

void floyd(void)
{
  int i, j, k;

  for (i = 0; i < MAX_NODES; i++) {
    for (j = 0; j < MAX_NODES; j++) {
      dist[i][j] = graph[i][j];
    }
  }

  for (k = 0; k < MAX_NODES; k++) {
    for (i = 0; i < MAX_NODES; i++) {
      for (j = 0; j < MAX_NODES; j++) {
        if (dist[i][k] != DISCONNECT && dist[k][j] != DISCONNECT) {
          int temp = dist[i][k] + dist[k][j];
          if (dist[i][j] == DISCONNECT || dist[i][j] > temp) {
            dist[i][j] = temp;
          }
        }
      }
    }
  }

  for (i = 0; i < MAX_NODES; i++) {
    dist[i][i] = 0;
  }
}

int main(void)
{
   int cases;
   cin >> cases;
   for(int i = 0; i < cases; ++i) {
      int w;
      int i, j;
      
      /* clear graph */
      for (i = 0; i < MAX_NODES; i++) {
	 for (j = 0; j < MAX_NODES; j++) {
	    graph[i][j] = DISCONNECT;
	 }
      }
      
      /* read graph */
      cin >> i >> j >> w;
      while (!(i == -1 && j == -1)) {
	 assert(0 <= i && i < MAX_NODES && 0 <= j && j < MAX_NODES);
	 graph[i][j] = graph[j][i] = w;
	 cin >> i >> j >> w;
      }
      
      floyd();
   }


  return 0;
}
